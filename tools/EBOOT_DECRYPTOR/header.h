#include <stdint.h>
#include "elf.h"

typedef struct
{
  // Certified file header (https://www.psdevwiki.com/ps3/Certified_File#:~:text=uses%20little%2Dendian.-,Header,-%5Bedit%5D)
  uint32_t magic;           // Must be "SCE\0".
  uint32_t version;         // 2 for PS3, 3 for PS Vita.
  uint16_t attribute;       // Corresponds to the revision of the encryption key. The Certified File Key ID is derived from the attribute.
  uint16_t category;        // See Category.
  uint32_t ext_header_size; // For SELF category only, set to 0 for other categories. See SELF_-_SPRX#Segment_Extended_Header.
  uint64_t file_offset;     // Offset to encapsulated data.
  uint64_t file_size;       // Size of the encapsulated data.

  // Extended header (https://www.psdevwiki.com/ps3/SELF_-_SPRX#PS3:~:text=1057395385319211008%3Fs%3D20-,Extended%20Header,-%5Bedit%5D)
  uint64_t ext_hdr_version;                   // 3 for PS3, 4 for PS Vita
  uint64_t program_identification_hdr_offset; // Offset to Program Identification Header.
  uint64_t ehdr_offset;                       // Offset to ELF Header.
  uint64_t phdr_offset;                       // Offset to ELF Program Header.
  uint64_t shdr_offset;                       // Offset to ELF Section Header.
  uint64_t segment_ext_hdr_offset;            // Offset to Segment Extended Header.
  uint64_t version_hdr_offset;                // Offset to Version Header.
  uint64_t supplemental_hdr_offset;           // Offset to Supplemental Header.
  uint64_t supplemental_hdr_size;             // Size of Supplemental Header.
  uint64_t ext_padding;

	uint8_t key[16];
	uint8_t key_pad[16];
	uint8_t iv[16];
	uint8_t iv_pad[16];
} header_t;


typedef struct{
  // Program Identification Header (https://www.psdevwiki.com/ps3/SELF_-_SPRX#Program_Identification_Header)
  uint64_t program_authority_id;
  uint32_t program_vender_id;
  uint32_t program_type;
  uint64_t program_sceversion;
  uint64_t padding;
} header_program_identification_t;


typedef struct{
  // ELF Header (https://www.psdevwiki.com/ps3/SELF_-_SPRX#ELF_Header)
  uint8_t e_ident[16];              /* ELF identification */
  uint16_t e_type;                  /* object file type */
  uint16_t e_machine;               /* machine type */
  uint32_t e_version;               /* object file version */
  uint64_t e_entry;                 /* entry point address */
  uint64_t e_phoff;                 /* program header offset */
  uint64_t e_shoff;                 /* section header offset */
  uint32_t e_flags;                 /* processor-specific flags */
  uint16_t e_ehsize;                /* ELF header size */
  uint16_t e_phentsize;             /* size of program header entry */
  uint16_t e_phnum;                 /* number of program header entries */
  uint16_t e_shentsize;             /* size of section header entry */
  uint16_t e_shnum;                 /* number of section header entries */
  uint16_t e_shstrndx;              /* section name string table index */
} header_elf_t;


typedef struct{
  // ELF Program Segment Header (https://www.psdevwiki.com/ps3/SELF_-_SPRX#ELF_Program_Header)
  Elf64_Word	p_type;			/* Segment type */
  Elf64_Word	p_flags;		/* Segment flags */
  Elf64_Off	p_offset;		/* Segment file offset */
  Elf64_Addr	p_vaddr;		/* Segment virtual address */
  Elf64_Addr	p_paddr;		/* Segment physical address */
  Elf64_Xword	p_filesz;		/* Segment size in file */
  Elf64_Xword	p_memsz;		/* Segment size in memory */
  Elf64_Xword	p_align;		/* Segment alignment */
} header_elf_seg;


typedef struct{
  // ELF Section Header 
  uint32_t sh_name;                 /* section name */
  uint32_t sh_type;                 /* section type */
  uint64_t sh_flags;                /* section attributes */
  uint64_t sh_addr;                 /* virtual address in memory */
  uint64_t sh_offset;               /* offset in file */
  uint64_t sh_size;                 /* size of section */
  uint32_t sh_link;                 /* link to other section */
  uint32_t sh_info;                 /* miscellaneous information */
  uint64_t sh_addralign;            /* address alignment boundary */
  uint64_t sh_entsize;              /* size of entries, if section has table */
} header_elf_sec;


typedef struct{
  // Segment Extended Header (https://www.psdevwiki.com/ps3/SELF_-_SPRX#Segment_Extended_Header)
  uint64_t offset;
  uint64_t size;
  uint32_t compression;
  uint32_t unknown;
  uint64_t encryption;
} header_segment_ext_t;


typedef struct{
  // Version Header (https://www.psdevwiki.com/ps3/SELF_-_SPRX#Version_Header)
  uint32_t subheader_type; // 1 - sceversion
  uint32_t present;        // 0 = false, 1 = true
  uint32_t size_vers;           // usually 0x10
  uint32_t unknown4;
} header_version_t;

/*! Metadata info. */
typedef struct header_encryption_t
{
	/*! Key. */
	u8 key[METADATA_INFO_KEY_LEN];
	/*! Key padding. */
	u8 key_pad[METADATA_INFO_KEYPAD_LEN];
	/*! IV. */
	u8 iv[METADATA_INFO_IV_LEN];
	/*! IV padding. */
	u8 iv_pad[METADATA_INFO_IVPAD_LEN];
} header_encryption_t;










