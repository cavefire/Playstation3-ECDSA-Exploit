/*
* Copyright (c) 2011-2013 by naehrwert
* This file is released under the GPLv2.
*/

#include <stdio.h>
#include <stdlib.h>

#include <sys/types.h>
#include <sys/stat.h>

#ifdef _WIN32
#include <io.h>
#include "getopt.h"
#else
#include <unistd.h>
#include <getopt.h>
#endif

#include "types.h"
#include "config.h"
#include "aes.h"
#include "util.h"
#include "keys.h"
#include "sce.h"
#include "np.h"
#include "self.h"
#include "rvk.h"

#include "frontend.h"

#include "header.h"
#include <fcntl.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#include "utils.h"
#include "ecdsa.h"

/*! Shorter Versions of arg options. */
#define ARG_NULL no_argument
#define ARG_NONE no_argument
#define ARG_REQ required_argument
#define ARG_OPT optional_argument

#define PRINT_ARRAY(array, size) \
  for (int i = 0; i < size; i++) \
    printf(" %02X", array[i]);   

/*! Verbose mode. */
BOOL _verbose = FALSE;
/*! Raw mode. */
BOOL _raw = FALSE;

/*! We got work. */
static BOOL _got_work = FALSE;
/*! List keys. */
static BOOL _list_keys = FALSE;
/*! Print infos on file. */
static BOOL _print_info = FALSE;
/*! Decrypt file. */
static BOOL _decrypt_file = FALSE;
/*! Encrypt file. */
static BOOL _encrypt_file = FALSE;

static BOOL _struct = FALSE;

/*! Parameters. */
s8 *_template = NULL;
s8 *_file_type = NULL;
s8 *_compress_data = NULL;
s8 *_skip_sections = NULL;
s8 *_key_rev = NULL;
s8 *_meta_info = NULL;
s8 *_keyset = NULL;
s8 *_auth_id = NULL;
s8 *_vendor_id = NULL;
s8 *_self_type = NULL;
s8 *_app_version = NULL;
s8 *_fw_version = NULL;
s8 *_add_shdrs = NULL;
s8 *_ctrl_flags = NULL;
s8 *_cap_flags = NULL;
#ifdef CONFIG_CUSTOM_INDIV_SEED
s8 *_indiv_seed = NULL;
#endif
s8 *_license_type = NULL;
s8 *_app_type = NULL;
s8 *_content_id = NULL;
s8 *_klicensee = NULL;
s8 *_real_fname = NULL;
s8 *_add_sig = NULL;

/*! Input file. */
static s8 *_file_in = NULL;
/*! Ouput file. */
static s8 *_file_out = NULL;

/*! Long option values. */
#define VAL_TEMPLATE 't'
#define VAL_FILE_TYPE '0'
#define VAL_COMPRESS_DATA '1'
#define VAL_SKIP_SECTIONS 's'
#define VAL_KEY_REV '2'
#define VAL_META_INFO 'm'
#define VAL_KEYSET 'K'
#define VAL_AUTH_ID '3'
#define VAL_VENDOR_ID '4'
#define VAL_SELF_TYPE '5'
#define VAL_APP_VERSION 'A'
#define VAL_FW_VERSION '6'
#define VAL_ADD_SHDRS '7'
#define VAL_CTRL_FLAGS '8'
#define VAL_CAP_FLAGS '9'
#ifdef CONFIG_CUSTOM_INDIV_SEED
#define VAL_INDIV_SEED 'a'
#endif
#define VAL_LICENSE_TYPE 'b'
#define VAL_APP_TYPE 'c'
#define VAL_CONTENT_ID 'f'
#define VAL_KLICENSEE 'l'
#define VAL_REAL_FNAME 'g'
#define VAL_ADD_SIG 'j'

static struct option options[] = 
{
	{"help", ARG_NONE, NULL, 'h'},
	{"print-keys", ARG_NONE, NULL, 'k'},
	{"print-infos", ARG_REQ, NULL, 'i'},
	{"decrypt", ARG_REQ, NULL, 'd'},
	{"encrypt", ARG_REQ, NULL, 'e'},
	{"verbose", ARG_NONE, NULL, 'v'},
	{"raw", ARG_NONE, NULL, 'r'},
	{"template", ARG_REQ, NULL, VAL_TEMPLATE},
	{"sce-type", ARG_REQ, NULL, VAL_FILE_TYPE},
	{"compress-data", ARG_REQ, NULL, VAL_COMPRESS_DATA},
	{"skip-sections", ARG_REQ, NULL, VAL_SKIP_SECTIONS},
	{"key-revision", ARG_REQ, NULL, VAL_KEY_REV},
	{"meta-info", ARG_REQ, NULL, VAL_META_INFO},
	{"keyset", ARG_REQ, NULL, VAL_KEYSET},
	{"self-auth-id", ARG_REQ, NULL, VAL_AUTH_ID},
	{"self-vendor-id", ARG_REQ, NULL, VAL_VENDOR_ID},
	{"self-type", ARG_REQ, NULL, VAL_SELF_TYPE},
	{"self-app-version", ARG_REQ, NULL, VAL_APP_VERSION},
	{"self-fw-version", ARG_REQ, NULL, VAL_FW_VERSION},
	{"self-add-shdrs", ARG_REQ, NULL, VAL_ADD_SHDRS},
	{"self-ctrl-flags", ARG_REQ, NULL, VAL_CTRL_FLAGS},
	{"self-cap-flags", ARG_REQ, NULL, VAL_CAP_FLAGS},
#ifdef CONFIG_CUSTOM_INDIV_SEED
	{"self-indiv-seed", ARG_REQ, NULL, VAL_INDIV_SEED},
#endif
	{"np-license-type", ARG_REQ, NULL, VAL_LICENSE_TYPE},
	{"np-app-type", ARG_REQ, NULL, VAL_APP_TYPE},
	{"np-content-id", ARG_REQ, NULL, VAL_CONTENT_ID},
	{"np-klicensee", ARG_REQ, NULL, VAL_KLICENSEE},
	{"np-real-fname", ARG_REQ, NULL, VAL_REAL_FNAME},
	{"np-add-sig", ARG_REQ, NULL, VAL_ADD_SIG},
	{"structure", ARG_NONE, NULL, 'z'},
	{NULL, ARG_NULL, NULL, 0}
};

static void print_version()
{
	printf("scetool " SCETOOL_VERSION " (C) 2011-2013 by naehrwert\n");
	printf("NP local license handling (C) 2012 by flatz\n");
	//printf("[Build Date/Time: %s/%s]\n", __DATE__, __TIME__);
}

#include <time.h>

static void print_usage()
{
	print_version();

	printf("USAGE: scetool [options] command\n");
	printf("COMMANDS                Parameters            Explanation\n");
	printf(" -h, --help                                   Print this help.\n");
	printf(" -k, --print-keys                             List keys.\n");
	printf(" -i, --print-infos      File-in               Print SCE file info.\n");
	printf(" -d, --decrypt          File-in File-out      Decrypt/dump SCE file.\n");
	printf(" -e, --encrypt          File-in File-out      Encrypt/create SCE file.\n");
	printf("OPTIONS                 Possible Values       Explanation\n");
	printf(" -v, --verbose                                Enable verbose output.\n");
	printf(" -r, --raw                                    Enable raw value output.\n");
	printf(" -t, --template         File-in               Template file (SELF only)\n");
	printf(" -0, --sce-type         SELF/RVK/PKG/SPP      SCE File Type\n");
	printf(" -1, --compress-data    TRUE/FALSE(default)   Whether to compress data or not.\n");
	printf(" -s, --skip-sections    TRUE(default)/FALSE   Whether to skip sections or not.\n");
	printf(" -2, --key-revision     e.g. 00,01,...,0A,... Key Revision\n");
	printf(" -m, --meta-info        64 bytes              Use provided meta info to decrypt.\n");
	printf(" -K, --keyset           32(Key)16(IV)\n");
	printf("                        40(Pub)21(Priv)1(CT)  Override keyset.\n");
	printf(" -3, --self-auth-id     e.g. 1010000001000003 Authentication ID\n");
	printf(" -4, --self-vendor-id   e.g. 01000002         Vendor ID\n");
	printf(" -5, --self-type        LV0/LV1/LV2/APP/ISO/\n");
	printf("                        LDR/NPDRM             SELF Type\n");
	printf(" -A, --self-app-version e.g. 0001000000000000 Application Version\n");
	printf(" -6, --self-fw-version  e.g. 0003004100000000 Firmware Version\n");
	printf(" -7, --self-add-shdrs   TRUE(default)/FALSE   Whether to add ELF shdrs or not.\n");
	printf(" -8, --self-ctrl-flags  32 bytes              Override control flags.\n");
	printf(" -9, --self-cap-flags   32 bytes              Override capability flags.\n");
#ifdef CONFIG_CUSTOM_INDIV_SEED
	printf(" -a, --self-indiv-seed  256 bytes             Individuals Seed (ISO only)\n");
#endif
	printf(" -b, --np-license-type  LOCAL/FREE            License Type\n");
	printf(" -c, --np-app-type      SPRX/EXEC/USPRX/UEXEC App Type (U* for updates)\n");
	printf(" -f, --np-content-id                          Content ID\n");
	printf(" -l, --np-klicensee     16 bytes              Override klicensee.\n");
	printf(" -g, --np-real-fname    e.g. EBOOT.BIN        Real Filename\n");
	printf(" -j, --np-add-sig       TRUE/FALSE(default)   Whether to add a NP sig. or not.\n");

	//getchar();

	exit(1);
}

static void parse_args(int argc, char **argv)
{
	char c;

#ifdef CONFIG_CUSTOM_INDIV_SEED
	while((c = getopt_long(argc, argv, "hki:d:e:vrt:0:1:s:2:m:K:3:4:5:A:6:7:8:9:a:b:c:f:l:g:j:", options, NULL)) != -1)
#else
	while((c = getopt_long(argc, argv, "hki:d:e:vrt:0:1:s:2:m:K:3:4:5:A:6:7:8:9:b:c:f:l:g:j:z:", options, NULL)) != -1)
#endif
	{
		switch(c)
		{
		case 'h':
			print_usage();
			break;
		case 'k':
			_got_work = TRUE;
			_list_keys = TRUE;
			//Got all args.
			return;
			break;
		case 'i':
			_got_work = TRUE;
			_print_info = TRUE;
			_file_in = optarg;
			//Got all args.
			return;
			break;
		case 'd':
			_got_work = TRUE;
			_decrypt_file = TRUE;
			_file_in = optarg;
			//Need more args.
			goto get_args;
			break;
		case 'e':
			_got_work = TRUE;
			_encrypt_file = TRUE;
			_file_in = optarg;
			//Need more args.
			goto get_args;
			break;
		case 'v':
			_verbose = TRUE;
			break;
		case 'r':
			_raw = TRUE;
			break;
		case VAL_TEMPLATE:
			_template = optarg;
			break;
		case VAL_FILE_TYPE:
			_file_type = optarg;
			break;
		case VAL_COMPRESS_DATA:
			_compress_data = optarg;
			break;
		case VAL_SKIP_SECTIONS:
			_skip_sections = optarg;
			break;
		case VAL_KEY_REV:
			_key_rev = optarg;
			break;
		case VAL_META_INFO:
			_meta_info = optarg;
			break;
		case VAL_KEYSET:
			_keyset = optarg;
			break;
		case VAL_AUTH_ID:
			_auth_id = optarg;
			break;
		case VAL_VENDOR_ID:
			_vendor_id = optarg;
			break;
		case VAL_SELF_TYPE:
			_self_type = optarg;
			break;
		case VAL_APP_VERSION:
			_app_version = optarg;
			break;
		case VAL_FW_VERSION:
			_fw_version = optarg;
			break;
		case VAL_ADD_SHDRS:
			_add_shdrs = optarg;
			break;
		case VAL_CTRL_FLAGS:
			_ctrl_flags = optarg;
			break;
		case VAL_CAP_FLAGS:
			_cap_flags = optarg;
			break;
#ifdef CONFIG_CUSTOM_INDIV_SEED
		case VAL_INDIV_SEED:
			_indiv_seed = optarg;
			break;
#endif
		case VAL_LICENSE_TYPE:
			_license_type = optarg;
			break;
		case VAL_APP_TYPE:
			_app_type = optarg;
			break;
		case VAL_CONTENT_ID:
			_content_id = optarg;
			break;
		case VAL_KLICENSEE:
			_klicensee = optarg;
			break;
		case VAL_REAL_FNAME:
			_real_fname = optarg;
			break;
		case VAL_ADD_SIG:
			_add_sig = optarg;
			break;
		case 'z':
			_got_work = TRUE;
			_struct = TRUE;
			_file_in = optarg;
			break;
		case '?':
			printf("[*] Error: Unknown option:");
			print_usage();
			break;
		}
	}

	get_args:;

	//Additional decrypt args.
	if(_decrypt_file)
	{
		if(argc - optind < 1)
		{
			printf("[*] Error: Decrypt needs an output file!\n");
			print_usage();
		}

		_file_out = argv[optind];
	}

	//Additional encrypt args.
	if(_encrypt_file)
	{
		if(argc - optind < 1)
		{
			printf("[*] Error: Encrypt needs an input and output file!\n");
			print_usage();
		}

		_file_out = argv[optind];
	}

		if(_struct)
	{
		if(argc - optind < 1)
		{
			printf("[*] Error: Decrypt needs an output file!\n");
			print_usage();
		}

		_file_out = argv[optind];
	}

}

#ifndef _DEBUG


void print_header_info(const header_t *header, const header_program_identification_t *program_identification, const header_elf_t *elf_header, const header_elf_seg *elf_seg_header, const header_elf_sec *elf_sec_header, const header_segment_ext_t *segment_ext_header, const header_version_t *version_header)
{
  printf("|---------------------------------------------------------------------------------------------|\n");
  printf("|                                        Certified Header                                     |\n");
  printf("|---------------------------------------------------------------------------------------------|\n");
  printf("| Magic:                           | %c%c%c                                                      |\n",
         (header->magic >> 24) & 0xFF, (header->magic >> 16) & 0xFF,
         (header->magic >> 8) & 0xFF);
  printf("| Version:                         | %-10d                                               |\n", header->version);
  printf("| Attribute:                       | %-10d                                               |\n", header->attribute);
  printf("| Category:                        | %-10d                                               |\n", header->category);
  printf("| Extended Header Size:            | %-10d                                               |\n", header->ext_header_size);
  printf("| File Offset:                     | %-10llu                                               |\n", header->file_offset);
  printf("| File Size:                       | %-10llu                                               |\n", header->file_size);
  printf("|---------------------------------------------------------------------------------------------|\n");
  printf("|                                        Extended Header                                      |\n");
  printf("|---------------------------------------------------------------------------------------------|\n");
  printf("| Extended Header Version:         | %-10llu                                               |\n", header->ext_hdr_version);
  printf("| Program Identification Offset:   | %-10llu                                               |\n", header->program_identification_hdr_offset);
  printf("| ELF Header Offset:               | %-10llu                                               |\n", header->ehdr_offset);
  printf("| Program Header Offset:           | %-10llu                                               |\n", header->phdr_offset);
  printf("| Section Header Offset:           | %-10llu                                               |\n", header->shdr_offset);
  printf("| Segment Extended Header Offset:  | %-10llu                                               |\n", header->segment_ext_hdr_offset);
  printf("| Version Header Offset:           | %-10llu                                               |\n", header->version_hdr_offset);
  printf("| Supplemental Header Offset:      | %-10llu                                               |\n", header->supplemental_hdr_offset);
  printf("| Supplemental Header Size:        | %-10llu                                               |\n", header->supplemental_hdr_size);
  printf("| Extended Padding:                | %-10llu                                               |\n", header->ext_padding);
  printf("|---------------------------------------------------------------------------------------------|\n");
  printf("|                                    Program Identification                                   |\n");
  printf("|---------------------------------------------------------------------------------------------|\n");
  printf("| Program Authority ID:            | %-10llu                                      |\n", program_identification->program_authority_id);
  printf("| Program Vender ID:               | %-10d                                               |\n", program_identification->program_vender_id);
  printf("| Program Type:                    | %-10d                                               |\n", program_identification->program_type);
  printf("| Program SCE Version:             | %-10llu                                          |\n", program_identification->program_sceversion);
  printf("| Padding:                         | %-10llu                                               |\n", program_identification->padding);
  printf("|---------------------------------------------------------------------------------------------|\n");
  printf("|                                        ELF Header                                           |\n");
  printf("|---------------------------------------------------------------------------------------------|\n");
  printf("| ELF Identification:              | ");
  PRINT_ARRAY(elf_header->e_ident, 16);
  printf("         |\n");
  printf("| ELF Type:                        | %-10d                                               |\n", elf_header->e_type);
  printf("| ELF Machine:                     | %-10d                                               |\n", elf_header->e_machine);
  printf("| ELF Version:                     | %-10d                                               |\n", elf_header->e_version);
  printf("| ELF Entry:                       | %-10llu                                               |\n", elf_header->e_entry);
  printf("| ELF Program Header Offset:       | %-10llu                                               |\n", elf_header->e_phoff);
  printf("| ELF Section Header Offset:       | %-10llu                                               |\n", elf_header->e_shoff);
  printf("| ELF Flags:                       | %-10d                                               |\n", elf_header->e_flags);
  printf("| ELF Header Size:                 | %-10d                                               |\n", elf_header->e_ehsize);
  printf("| ELF Program Header Entry Size:   | %-10d                                               |\n", elf_header->e_phentsize);
  printf("| ELF Program Header Entry Count:  | %-10d                                               |\n", elf_header->e_phnum);
  printf("| ELF Section Header Entry Size:   | %-10d                                               |\n", elf_header->e_shentsize);
  printf("| ELF Section Header Entry Count:  | %-10d                                               |\n", elf_header->e_shnum);
  printf("| ELF Section Header String Index: | %-10d                                               |\n", elf_header->e_shstrndx);
  printf("|---------------------------------------------------------------------------------------------|\n");
  printf("|                                  ELF Program Segment Header                                 |\n");
  printf("|---------------------------------------------------------------------------------------------|\n");
  printf("| Segment Type:                    | %-10d                                               |\n", elf_seg_header->p_type);
  printf("| Segment Flags:                   | %-10d                                               |\n", elf_seg_header->p_flags);
  printf("| Segment Offset:                  | %-10llu                                               |\n", elf_seg_header->p_offset);
  printf("| Segment Virtual Address:         | %-10llu                                               |\n", elf_seg_header->p_vaddr);
  printf("| Segment Physical Address:        | %-10llu                                               |\n", elf_seg_header->p_paddr);
  printf("| Segment File Size:               | %-10llu                                               |\n", elf_seg_header->p_filesz);
  printf("| Segment Memory Size:             | %-10llu                                               |\n", elf_seg_header->p_memsz);
  printf("| Segment Alignment:               | %-10llu                                               |\n", elf_seg_header->p_align);
  printf("|---------------------------------------------------------------------------------------------|\n");
  printf("|                                      ELF Section Header                                     |\n");
  printf("|---------------------------------------------------------------------------------------------|\n");
  printf("| Section Name:                    | %-10d                                               |\n", elf_sec_header->sh_name);
  printf("| Section Type:                    | %-10d                                               |\n", elf_sec_header->sh_type);
  printf("| Section Flags:                   | %-10llu                                               |\n", elf_sec_header->sh_flags);
  printf("| Section Address:                 | %-10llu                                               |\n", elf_sec_header->sh_addr);
  printf("| Section Offset:                  | %-10llu                                               |\n", elf_sec_header->sh_offset);
  printf("| Section Size:                    | %-10llu                                               |\n", elf_sec_header->sh_size);
  printf("| Section Link:                    | %-10d                                               |\n", elf_sec_header->sh_link);
  printf("| Section Info:                    | %-10d                                               |\n", elf_sec_header->sh_info);
  printf("| Section Address Alignment:       | %-10llu                                               |\n", elf_sec_header->sh_addralign);
  printf("| Section Entry Size:              | %-10llu                                               |\n", elf_sec_header->sh_entsize);
  printf("|---------------------------------------------------------------------------------------------|\n");
  printf("|                               Segment Extendend Header                                      |\n");
  printf("|---------------------------------------------------------------------------------------------|\n");
  printf("| Segment Extended Offset          | %-10llu                                               |\n", segment_ext_header->offset);
  printf("| Segment Extended Header Size:    | %-10llu                                               |\n", segment_ext_header->size);
  printf("| Segment Extended Compression:    | %-10d                                               |\n", segment_ext_header->compression);
  printf("| Segment Extended Unknown:        | %-10d                                               |\n", segment_ext_header->unknown);
  printf("| Segment Extended Encrytpion:     | %-10llu                                               |\n", segment_ext_header->encryption);
  printf("|---------------------------------------------------------------------------------------------|\n");
  printf("|                                     Version Header                                          |\n");
  printf("|---------------------------------------------------------------------------------------------|\n");
  printf("| Version Header Type:             | %-10d                                               |\n", version_header->subheader_type);
  printf("| Version Header Present:          | %-10d                                               |\n", version_header->present);
  printf("| Version Header Size:             | %-10d                                               |\n", version_header->size_vers);
  printf("| Version Header Unknown:          | %-10d                                               |\n", version_header->unknown4);
  printf("|---------------------------------------------------------------------------------------------|\n");
  printf("|                                   Encryption Root Header                                    |\n");
  printf("|---------------------------------------------------------------------------------------------|\n");
  printf("| Key:                             |");
  PRINT_ARRAY(enc_root->key, 16);
  printf("          |\n");
  printf("| Key_Pad:                         |");
  PRINT_ARRAY(enc_root->key_pad, 16);
  printf("          |\n");
  printf("| IV:                              |");
  PRINT_ARRAY(enc_root->iv, 16);
  printf("          |\n");
  printf("| IV_Pad:                          |");
  PRINT_ARRAY(enc_root->iv_pad, 16);
  printf("          |\n");
  printf("|---------------------------------------------------------------------------------------------|\n");
  printf("|                                        Signatur				                              |\n");
  printf("|---------------------------------------------------------------------------------------------|\n");
  printf("| r:                 	     |");
  PRINT_ARRAY(signature_ecdsa->r, 21);
  printf(" |\n");
  printf("| s:                 	     |");
  PRINT_ARRAY(signature_ecdsa->s, 21);
  printf(" |\n");
  printf("| Padding:                   |");
  PRINT_ARRAY(signature_ecdsa->padding, 6);
  printf("          				                      |\n");
  printf("|---------------------------------------------------------------------------------------------|\n");
  printf("|                                           Hash			                                  |\n");
  printf("|---------------------------------------------------------------------------------------------|\n");
  printf("| Hash:                      |");
  PRINT_ARRAY(hash, 0x14);
  printf("    |\n");
  printf("|---------------------------------------------------------------------------------------------|\n\n\n");


  
  printf("|---------------------------------------------------------------------------------------------|\n");
  printf("|                                   ECDSA-KURVENPARAMETER			                  		  |\n");
  printf("|---------------------------------------------------------------------------------------------|\n");
  printf("| p:                 	     |");
  PRINT_ARRAY(ECDSA_Params->p, 20);
  printf("    |\n");
  printf("| a:                 	     |");
  PRINT_ARRAY(ECDSA_Params->a, 20);
  printf("    |\n");
  printf("| b:                 	     |");
  PRINT_ARRAY(ECDSA_Params->b, 20);
  printf("    |\n");
  printf("| q:                 	     |");
  PRINT_ARRAY(ECDSA_Params->N, 21);
  printf(" |\n");
  printf("| Gx:                 	     |");
  PRINT_ARRAY(ECDSA_Params->Gx, 20);
  printf("    |\n");
  printf("| Gy:                 	     |");
  PRINT_ARRAY(ECDSA_Params->Gy, 20);
  printf("    |\n");
  printf("|---------------------------------------------------------------------------------------------|\n");
  printf("|                                ECDSA-Hash/Signatur-Verifikation			              	  |\n");
  printf("|---------------------------------------------------------------------------------------------|\n");
  printf("| ECDSA-Verify:              | %d															  |\n", verify);  										  
  printf("|---------------------------------------------------------------------------------------------|\n\n\n");


}

header_t *load_eboot(char *eboot_path)
{
  FILE *eboot_file = fopen(eboot_path, "rb");
  header_t *header = (header_t*)malloc(sizeof(header_t));

  if (eboot_file == NULL)
  {
    printf("Error opening file\n");
    exit(1);
  }

  // get file size
  fseek(eboot_file, 0, SEEK_END);
  long file_size = ftell(eboot_file);
  fseek(eboot_file, 0, SEEK_SET);

  char *buffer = (char*)malloc(file_size);
  if (buffer == NULL)
  {
    printf("Error allocating memory\n");
    exit(1);
  }

  fread(buffer, file_size, 1, eboot_file);
  fclose(eboot_file);

  // copy to header
  memcpy(header, buffer, sizeof(header_t));

  // convert to host byte order
  // Certified Header
  header->magic = ntohl(header->magic);
  header->version = ntohl(header->version);
  header->attribute = ntohs(header->attribute);
  header->category = ntohs(header->category);
  header->ext_header_size = ntohl(header->ext_header_size);
  header->file_offset = be64toh(header->file_offset);
  header->file_size = be64toh(header->file_size);

  // Extended Header
  header->ext_hdr_version = be64toh(header->ext_hdr_version);
  header->program_identification_hdr_offset = be64toh(header->program_identification_hdr_offset);
  header->ehdr_offset = be64toh(header->ehdr_offset);
  header->phdr_offset = be64toh(header->phdr_offset);
  header->shdr_offset = be64toh(header->shdr_offset);
  header->segment_ext_hdr_offset = be64toh(header->segment_ext_hdr_offset);
  header->version_hdr_offset = be64toh(header->version_hdr_offset);
  header->supplemental_hdr_offset = be64toh(header->supplemental_hdr_offset);
  header->supplemental_hdr_size = be64toh(header->supplemental_hdr_size);
  header->ext_padding = be64toh(header->ext_padding);

  header_program_identification_t *program_identification = (header_program_identification_t*)malloc(sizeof(header_program_identification_t));
  memcpy(program_identification, buffer + (header->program_identification_hdr_offset), sizeof(header_program_identification_t));

  header_elf_t *elf_header = (header_elf_t*)malloc(sizeof(header_elf_t));
  memcpy(elf_header, buffer + (header->ehdr_offset), sizeof(header_elf_t));

  header_elf_seg *elf_seg_header = (header_elf_seg*)malloc(sizeof(header_elf_seg));
  memcpy(elf_seg_header, buffer + (header->phdr_offset), sizeof(header_elf_seg));

  header_elf_sec *elf_sec_header = (header_elf_sec*)malloc(sizeof(header_elf_sec));
  memcpy(elf_sec_header, buffer + (header->shdr_offset), sizeof(header_elf_sec));

  header_segment_ext_t *segment_ext_header = (header_segment_ext_t*)malloc(sizeof(header_segment_ext_t));
  memcpy(segment_ext_header, buffer + (header->segment_ext_hdr_offset), sizeof(header_segment_ext_t));

  header_version_t *version_header = (header_version_t*)malloc(sizeof(header_version_t));
  memcpy(version_header, buffer + (header->version_hdr_offset), sizeof(header_version_t));

  header_encryption_t *encryption_header = (header_encryption_t*)malloc(sizeof(header_encryption_t));
  memcpy(encryption_header, buffer + 32 + header->ext_header_size, sizeof(header_encryption_t));

  

  // Program Identification
  program_identification->program_authority_id = be64toh(program_identification->program_authority_id);
  program_identification->program_vender_id = ntohl(program_identification->program_vender_id);
  program_identification->program_type = ntohl(program_identification->program_type);
  program_identification->program_sceversion = be64toh(program_identification->program_sceversion);
  program_identification->padding = be64toh(program_identification->padding);

  // ELF Header
  elf_header->e_type = ntohs(elf_header->e_type);
  elf_header->e_machine = ntohs(elf_header->e_machine);
  elf_header->e_version = ntohl(elf_header->e_version);
  elf_header->e_entry = be64toh(elf_header->e_entry);
  elf_header->e_phoff = be64toh(elf_header->e_phoff);
  elf_header->e_shoff = be64toh(elf_header->e_shoff);
  elf_header->e_flags = ntohl(elf_header->e_flags);
  elf_header->e_ehsize = ntohs(elf_header->e_ehsize);
  elf_header->e_phentsize = ntohs(elf_header->e_phentsize);
  elf_header->e_phnum = ntohs(elf_header->e_phnum);
  elf_header->e_shentsize = ntohs(elf_header->e_shentsize);
  elf_header->e_shnum = ntohs(elf_header->e_shnum);
  elf_header->e_shstrndx = ntohs(elf_header->e_shstrndx);

  // Program Header
  elf_seg_header->p_type = ntohl(elf_seg_header->p_type);
  elf_seg_header->p_flags = ntohl(elf_seg_header->p_flags);
  elf_seg_header->p_offset = be64toh(elf_seg_header->p_offset);
  elf_seg_header->p_vaddr = be64toh(elf_seg_header->p_vaddr);
  elf_seg_header->p_paddr = be64toh(elf_seg_header->p_paddr);
  elf_seg_header->p_filesz = be64toh(elf_seg_header->p_filesz);
  elf_seg_header->p_memsz = be64toh(elf_seg_header->p_memsz);
  elf_seg_header->p_align = be64toh(elf_seg_header->p_align);

  // Section Header
  elf_sec_header->sh_name = ntohl(elf_sec_header->sh_name);
  elf_sec_header->sh_type = ntohl(elf_sec_header->sh_type);
  elf_sec_header->sh_flags = be64toh(elf_sec_header->sh_flags);
  elf_sec_header->sh_addr = be64toh(elf_sec_header->sh_addr);
  elf_sec_header->sh_offset = be64toh(elf_sec_header->sh_offset);
  elf_sec_header->sh_size = be64toh(elf_sec_header->sh_size);
  elf_sec_header->sh_link = ntohl(elf_sec_header->sh_link);
  elf_sec_header->sh_info = ntohl(elf_sec_header->sh_info);
  elf_sec_header->sh_addralign = be64toh(elf_sec_header->sh_addralign);
  elf_sec_header->sh_entsize = be64toh(elf_sec_header->sh_entsize);

  // Segment Extenden Header
  segment_ext_header->offset = be64toh(segment_ext_header->offset);
  segment_ext_header->size = be64toh(segment_ext_header->size);
  segment_ext_header->compression = ntohl(segment_ext_header->compression);
  segment_ext_header->unknown = ntohl(segment_ext_header->unknown);
  segment_ext_header->encryption = ntohl(segment_ext_header->encryption);

  /*header->data = (void*)be64toh((__uint64_t)header->data);
  header->size = be64toh(header->size);
  header->offset = be64toh(header->offset);*/

  // Version Header
  version_header->subheader_type = ntohl(version_header->subheader_type);
  version_header->present = ntohl(version_header->present);
  version_header->size_vers = ntohl(version_header->size_vers);
  version_header->unknown4 = ntohl(version_header->unknown4);

  print_header_info(header, program_identification, elf_header, elf_seg_header, elf_sec_header, segment_ext_header, version_header);

  return header;
}

int main(int argc, char **argv)
{
	s8 *ps3 = NULL, path[256];

	deleteFile("debug/bin.txt");
  
	//Check for args.
	if(argc <= 1){
		printf("No arguments specified.\n");
		print_usage();
	}

	//Parse them.
	parse_args(argc, argv);
	
	//Only options won't suffice.
	if(_got_work == FALSE){
		printf("No arguments specified.\n");
		print_usage();
	}

	//print_version();
	//printf("\n");

	//Try to get path from env:PS3.
	if((ps3 = getenv(CONFIG_ENV_PS3)) != NULL)
		if(access(ps3, 0) != 0)
			ps3 = NULL;

	//Load keysets.
	if(ps3 != NULL)
	{
		sprintf(path, "%s/%s", ps3, CONFIG_KEYS_FILE);
		if(access(path, 0) != 0)
			sprintf(path, "%s/%s", CONFIG_KEYS_PATH, CONFIG_KEYS_FILE);
	}
	else
		sprintf(path, "%s/%s", CONFIG_KEYS_PATH, CONFIG_KEYS_FILE);
	if(keys_load(path) == TRUE)
		_LOG_VERBOSE("Loaded keysets.\n");
	else
	{
		if(_list_keys == TRUE)
		{
			printf("[*] Error: Could not load keys.\n");
			return 0;
		}
		else
			printf("[*] Warning: Could not load keys.\n");
	}

	//Load curves.
	if(ps3 != NULL)
	{
		sprintf(path, "%s/%s", ps3, CONFIG_CURVES_FILE);
		if(access(path, 0) != 0)
			sprintf(path, "%s/%s", CONFIG_CURVES_PATH, CONFIG_CURVES_FILE);
	}
	else
		sprintf(path, "%s/%s", CONFIG_CURVES_PATH, CONFIG_CURVES_FILE);
	if(curves_load(path) == TRUE)
		_LOG_VERBOSE("Loaded loader curves.\n");
	else
		printf("[*] Warning: Could not load loader curves.\n");

	//Load curves.
	if(ps3 != NULL)
	{
		sprintf(path, "%s/%s", ps3, CONFIG_VSH_CURVES_FILE);
		if(access(path, 0) != 0)
			sprintf(path, "%s/%s", CONFIG_VSH_CURVES_PATH, CONFIG_VSH_CURVES_FILE);
	}
	else
		sprintf(path, "%s/%s", CONFIG_VSH_CURVES_PATH, CONFIG_VSH_CURVES_FILE);
	if(vsh_curves_load(path) == TRUE)
		_LOG_VERBOSE("Loaded vsh curves.\n");
	else
		printf("[*] Warning: Could not load vsh curves.\n");

	//Set klicensee.
	if(_klicensee != NULL)
	{
		if(strlen(_klicensee) != 0x10*2)
		{
			printf("[*] Error: klicensee needs to be 16 bytes.\n");
			return FALSE;
		}
		np_set_klicensee(_x_to_u8_buffer(_klicensee));
	}

	if(_list_keys == TRUE)
	{
		printf("[*] Loaded keysets:\n");
		_print_key_list(stdout);
	}
	else if(_print_info)
		frontend_print_infos(_file_in);
	else if(_decrypt_file){
		frontend_decrypt(_file_in, _file_out);
		fwrite(hash, sizeof(unsigned char), 20, stdout);
    	fwrite(&signature_ecdsa, sizeof(signature_t), 1, stdout);
	}
	else if(_encrypt_file){
		_file_type = "SELF";
		_self_type = "APP";
		_key_rev = "0001";
		_auth_id = "[retail game/update]";
		_vendor_id = "[normal]";
		_app_version = "0003001500000000";	
		frontend_encrypt(_file_in, _file_out);
		/*writeToFile(signature_ecdsa->r, sizeof(signature_ecdsa->r), "debug/r.bin");
		writeToFile(signature_ecdsa->s, sizeof(signature_ecdsa->s), "debug/s.bin");*/
	}
	else if(_struct){
		// load file contents and save as header_t
		frontend_decrypt(_file_in, _file_out);
		load_eboot(_file_in);
	}

	return 0;
}
#endif
